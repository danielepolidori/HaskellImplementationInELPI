kind typ type.
kind term type.

type app  term -> term -> term.
type lam  (term -> term) -> term.

type arr typ -> typ -> typ.

type of term -> typ -> prop.

mode (of i o).
of (uvar _ as X) T :- !, declare_constraint (of X T) [X].
of (app X Y) B :- of X (arr A B), of Y A.
of (lam F) (arr A B) :- pi x \ of x A => of (F x) B.



%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%



% primo esempio senza polimorfismo: riuscire a tipare
% of 1 int.
% of 2 int.
% typeclass (printable T) [print, arr T int].
% istanza (printable int) [print, lam x \ x].
% istanza (printable (list T)) [print, lam l \ concat (map Print_elem l) ]
%  :- istanza (printable T) [print, Print_elem].
% prog = [f, lam x \ print (app (app plus 1) 2)]
% prog = [f, lam x \ print [1,2,3]]



% idea 1
%of X int :- Integer(X).

% idea 2
%type of int -> prop.

% idea 3
%type of int -> type -> prop.

% idea 4
%constraint of {
%   rule (of X int) <=> (1 is X); (2 is X); (3 is X); ... .
%}



type typeclass string -> typ -> string -> typ -> prop.
%			   nome_classe -> tipo_classe -> nome funzione -> tipo_funzione

type istanza string -> typ -> string -> term -> prop.

typeclass S1 T S2 (arr T _).

istanza S1 T S2 (lam F) :- typeclass S1 TA S2 (arr TA TB), of (lam F) (arr T TB).	% Comprende anche il caso TB=TA ?


%test1 :-
% typeclass "printable" T "print" (arr T int),
% istanza "printable" int "print" (lam x \ x).



%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%



% TODO 1: haskell senza type classes
%  - implementare tutti i costrutti Haskell
%    usabili per definire funzioni
%    es. pattern matching (case), e let-in
%  - definire un programma Haskell come una lista
%    di funzioni ovvero coppie nome-corpo
%  - aggiungere il forall ai tipi
%    es:  forall T \ list T -> list T -> list T
%    ovvero: un tipo e' dato da una lista di
%    forall (imbricati) terminati da un tipo
%    fatto da sole arr
%    es. forall K \ forall V \ arr (K (arr (hash K V) V))
%    controesempio:  arr T (forall K \ K)
%  - implementare il predicato of per i nuovi costrutti
%  - la regola of per le funzioni deve inserire i
%    forall per ogni meta-variabile rimasta tale nel
%    corpo (ELPI only)



type step term -> term -> prop.

step (app (lam F) X) (F X).



% Funzione definita con il costrutto case

type fun_case term -> term.
%			  (coppie input-return) -> input -> funzione definita con case

type coppia_case term -> term -> term.
%				 input -> return -> termine coppia_case

of (fun_case (coppia_case A B)) (arr TA TB) :- of A TA, of B TB.
% of (fun_case (coppia_case A1 B1) (coppia_case A2 B2) (coppia_case A3 B3) [...]) (arr TA TB)
%  :- of A1 TA, of A2 TA, of A3 TA, [...], of B1 TB, of B2 TB, of B3 TB, [...].

%B :- app (fun_case (coppia_case A B)) A.
step (app (fun_case (coppia_case A B)) A) B.

mode (of i o).
of (uvar _ as X) (typ_arr (arr T1 T2)) :- !, declare_constraint (of X (typ_for (forall T1 (forall T2 _)) (arr T1 T2))) [X].		% Va esteso al caso generale


% Funzione definita con il costrutto let-in

type fun_let term -> term.
%			 (triple input-let-in) -> funzione definita con let

type tripla_let term -> term -> term -> term.
%				input -> let -> in -> termine tripla_let

of (fun_let (tripla_let I (lam F) (lam G))) (arr TI TG) :- of I TI, of (lam F) (arr TI TF), of (lam G) (arr TF TG).
% of (fun_let (tripla_let I1 (lam F1) (lam G1)) (tripla_let I2 (lam F2) (lam G2)) (tripla_let I3 (lam F3) (lam G3)) [...]) (arr TI TG)
%  :- of I1 TI, of I2 TI, of I3 TI, [...], of (lam F1) (arr TI TF), of (lam F2) (arr TI TF), of (lam F3) (arr TI TF), [...], of (lam G1) (arr TF TG), of (lam G2) (arr TF TG), of (lam G3) (arr TF TG), [...].

%app (lam G) (app (lam F) I) :- app (fun_let (tripla_let I (lam F) (lam G))) I.
% G (F I) :- ...
step (app (fun_let (tripla_let I (lam F) (lam G))) I) (app (lam G) (app (lam F) I)).



% Funzioni come coppie nome-corpo

type fun string -> term -> term.
%		 nome funzione -> corpo funzione -> termine fun

of (fun S (lam F)) (arr T1 T2) :- of (lam F) (arr T1 T2).

%lam F :- fun S (lam F).
step (fun S (lam F)) (lam F).
step (app (fun S (lam F)) X) (app (lam F) X).



% Programma Haskell come lista di funzioni

% ~ Con 'programma Haskell' si intende questo seguente? O il file .elpi in generale?

type prog (list term) -> term.		% ~ E' giusto che prog restituisca un term?
%		  lista di funzioni -> ?

% Tutte le funzioni del programma sono di tipo 'arr T1 T2'
of (prog [H|T]) (arr T1 T2) :- of H (arr T1 T2), of (prog T) (arr T1 T2).
of (prog [H|[]]) (arr T1 T2) :- of H (arr T1 T2).	% Caso base

%app (prog [H|T]) I :- app H I.
%app (prog [H|T]) I :- app (prog T) I.
%app (prog [H|[]]) I :- app H I.		% Caso base



% Forall aggiunto ai tipi

% ~ Si possono avere due tipi (quello fatto di forall+arr e quello fatto di sole arr) oppure soltanto uno fatto di forall+arr?


% idea 1 (forall e arr separati)
% PROBLEMA: 

kind schema type.
kind tipo type.
kind typ_single type.

type arr tipo -> tipo -> tipo.

type forall typ_single -> schema -> schema.		% ~ Come si fa a scrivere l'ultimo 'forall'? Con 'nil'?

type typ_for schema -> tipo -> typ.		% e.g. typ_for (forall T1 (forall T2 (forall T3 _))) (arr T1 (arr T2 T3))
type typ_arr tipo -> typ.				% e.g. typ_arr (arr T1 (arr T2 T3))


% idea 2 (forall e arr imbricati)
% PROBLEMA: 'arr' potrebbe prendere al suo interno dei 'forall'

% e.g. forall T1 (forall T2 (forall T3 (arr T1 (arr T2 T3))))

%kind scheme type.

%type forall scheme -> typ -> typ.






























%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%



% TODO 2: aggiunta delle type classes
%  - meccanismo per dichiarare le type classes
%    (meccanismo = predicato ELPI)
%    typeclass (printable T) [print, arr T string]
%  - meccanismo per dichiarare istanze di type classes
%    (meccanismo = predicato ELPI)
%      istanza (printable int) [print, lam x \ ...]
%      istanza (printable (list T)) [print, lam l \ concat (map Print_elem l) ]
%       :- istanza (printable T) [print, Print_elem].
%  - quando of trova un metodo di una type class
%    deve cercare un'istanza
%  - la funzione di ricerca di un'istanza deve generare
%    un constraint se il tipo e' una variabile
%  - cambiare di nuovo la sintassi dei tipi per permettere
%    di assumere type-class su variabili di tipo
%    es. forall T \ printable T => list T -> string
%    le => devono stare fra i forall e il tipo semplice
%  - cambiare la regola of per le definizioni di funzione
%    in modo che dopo aver tipato il corpo recuperi dall'insieme
%    dei vincoli tutte le type-class richieste e le trasformi
%    nelle premesse =>   (ELPI only)

% TODO 3: estensioni delle type classes
%  - implementare le estensioni sotto forma di regole
%    ELPI per il predicato di istanze
