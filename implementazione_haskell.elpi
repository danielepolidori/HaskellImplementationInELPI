kind tipo type.
kind term type.

type app  term -> term -> term.
type lam  (term -> term) -> term.

type arr tipo -> tipo -> tipo.

type of term -> tipo -> prop.

mode (of i o).
of (uvar _ as X) T :- !, declare_constraint (of X T) [X].
of (app X Y) B :- of X (arr A B), of Y A.
of (lam F) (arr A B) :- pi x \ of x A => of (F x) B.



%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%



% primo esempio senza polimorfismo: riuscire a tipare
% of 1 int.
% of 2 int.
% typeclass printable T [print, arr T int].
% istanza printable int [print, lam x \ x].
% istanza printable (list T) [print, lam l \ concat (map Print_elem l) ]
%  :- istanza printable T [print, Print_elem].
% of (app Fun Arg) Ty :-			% Ty = "tipo"
%   istanza N L,					% N = "nome", L = "lista"
%   cerca_in_L L Fun Te T,			% Te = "termine"
%   typeclass N TY Defs,
%   cerca_Fun_in_LTY Fun Defs Ty.
%% esempio:  of (app print 3) Z
%% deve istanziare Z con int.
% check_istanze :-		% Controlla che per ogni istanza del programma ci sia la corrispondente typeclass
%   istanza N ARG DEF,											% N = "nome", ARG = "argomento", DEF = lista di definizioni
%   (typeclass N ARG DECL, simil_of_list DEF DECL ; exit 0)		% DECL = lista di dichiarazioni
%   fail.
% check_istanze.	% Caso base
% test Prog L :-
%   simil_of_list per fare of su tutte le funzioni di L
% test [f, lam x \ print (app (app plus 1) 2)].
% test [f, lam x \ print [1,2,3]].


of 1 int.	% ~ TESTARE
of 2 int.

typeclass printable T [print, arr T int].

istanza printable int [print, lam x \ x].
istanza printable (list T) [print, lam l \ concat (map Print_elem l) ]
 :- istanza printable T [print, Print_elem].

test [f, lam x \ print (app (app plus 1) 2)].
test [f, lam x \ print [1,2,3]].



%%%



% Tutti gli elementi della lista hanno quel tipo
type of_list list term -> typ -> prop.
of_list [H|T] X :- of H X, of_list T X.
of_list [] X.		% Caso base (la lista vuota ha qualsiasi tipo)


% Ogni funzione della lista1 ha lo stesso nome e lo stesso tipo di una funzione contenuta nella lista2
type match_fun_list list term -> list term -> prop.
match_fun_list [] [].
match_fun_list [H|T] L :-
 search H L LminusH,		% LminusH = lista L senza l'elemento H
 match_fun_list T LminusH.

%match_fun_list [H1|T1] [H2|T2] :- match_fun H1 H2, match_fun_list T1 T2.					% Confronta la prima coppia e (se fa match) prosegue ...
%match_fun_list [H1|T1] [H2|T2] :- match_fun_list [H1|T1] T2, match_fun_list T1 [H2|T2].		% ... altrimenti scorre la lista2 alla ricerca della funzione che faccia match (e T2 la controlla ripartendo dall'inizio della lista2)

type match_fun term -> term -> prop.
match_fun (fun_def S1 F) (fun_dic S1 T) :- of F T.


kind classes type.

type typeclass classes -> list term -> prop.

type classe string -> typ -> classes.

typeclass (classe S T) L :- of_list L (typ_arr (arr T _)).
% e.g. typeclass (classe "printable" T) [fun_dic "print" (typ_arr (arr T int)]


type istanza classes -> list term -> prop.

istanza (classe S T) L1 :- typeclass (classe S TA) L2, of_list L2 (arr TA TB), of_list L1 (arr T TB), match_fun L2 L1.		% ~ Va esteso al caso generale: un tipo generico e non soltanto (arr _ _)



% Test

typeclass (classe "printable" T) [fun_dic "print" (arr T int)].

test1 :-
 istanza (classe "printable" int) [fun_def "print" (lam x \ x)].

% Dovrebbe generare errore
test1_err :-
 istanza (classe "printable" int) [fun_def "abcde" (lam x \ x)].



%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%



% TODO 1: haskell senza type classes
%  - implementare tutti i costrutti Haskell
%    usabili per definire funzioni
%    es. pattern matching (case), e let-in
%  - definire un programma Haskell come una lista
%    di funzioni ovvero coppie nome-corpo
%  - aggiungere il forall ai tipi
%    es:  forall T \ list T -> list T -> list T
%    ovvero: un tipo e' dato da una lista di
%    forall (imbricati) terminati da un tipo
%    fatto da sole arr
%    es. forall K \ forall V \ arr (K (arr (hash K V) V))
%    controesempio:  arr T (forall K \ K)
%  - implementare il predicato of per i nuovi costrutti
%  - la regola of per le funzioni deve inserire i
%    forall per ogni meta-variabile rimasta tale nel
%    corpo (ELPI only)





%%% Funzione definita con il costrutto case

% Esempio in pseudocodice:
%
%  let f x =
%   match x of
%      O => O
%    | S y => y + 2


kind pair type.

type case_of term -> list pair -> term.

type branch string -> term -> pair.

% es:   case_of x [branch "0" 0, branch "S" (lam y \ y + 2)]


of (case_of X L) T :- check_out_list L T.


type check_out_list list pair -> tipo -> prop.

check_out_list [branch S R | T] X :- of R X, check_out_list T X.
check_out_list [] X.	% Caso base





%%% Funzione definita con il costrutto let-in
% ~ DA RICONTROLLARE, non mi convince l'uso delle funzioni negli esempi

% es:
%       let
%           id = lam A \ A
%       in
%           id 4


kind assignment type.

type let_in list assignment -> term -> term.

type assegnamento string -> term -> assignment.

% es:   let_in [assegnamento "x" 1, assegnamento "y" 2, assegnamento "z" 3] (x + y + z)
%              [x = 1, y = 2, z = 3] (x + y + z)
%              lam x \ lam y \ lam z \ x + y + z

% es:   let_in [assegnamento "id" (lam A \ A)] (app id 4)
%              [id = (lam A \ A)] (id 4)


of (let_in L EXPR) T :- of EXPR T.





%%% Funzioni come coppie nome-corpo


type fun_impl string -> term -> term.
%             nome funzione -> corpo funzione -> _ .

% es:   fun_impl "foo1" (lam x \ lam y \ x + y)
%       fun_impl "foo2" (case_of x [branch "0" 0, branch "S" (lam y \ y + 2)])
%       fun_impl "foo3" (let_in ... )

of (fun_impl S (lam F)) T :- of (lam F) T.


kind declaration type.

type fun_decl string -> schema -> declaration.
%             nome funzione -> tipo funzione -> _ .

% es.
%  Term =
%   let id = lam A \ A in     % il termine A \ A ha tipo X -> X
%                             % id viene dichiarato con schema for_all X \ X -> X
%    id 4                     % ha tipo int
%  tutto Term ha tipo int





%%% Programma Haskell come lista di funzioni

% ~ Con 'programma Haskell' si intende questo seguente? O il file .elpi in generale?

type prog list term -> term.		% ~ E' giusto che prog restituisca un term?
%		  lista di funzioni -> ?

% Tutte le funzioni del programma sono di tipo 'arr T1 T2'
of (prog L) (arr T1 T2) :- of_list L (arr T1 T2).

%app (prog [H|T]) I :- app H I.
%app (prog [H|T]) I :- app (prog T) I.
%app (prog [H|[]]) I :- app H I.		% Caso base



%%% Forall aggiunto ai tipi

% Si possono avere due tipi (quello fatto di forall+arr e quello fatto di sole arr)
%
%   es_forall+arr:      for_all T \ base (arr T T)
%   es_arr:             arr T1 T2


kind schema type.

type for_all (tipo -> schema) -> schema.
type base tipo -> schema.

% es.:   for_all X \ for_all Y \ base (arr X Y).









































%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%



% TODO 2: aggiunta delle type classes
%  - meccanismo per dichiarare le type classes
%    (meccanismo = predicato ELPI)
%    typeclass (printable T) [print, arr T string]
%  - meccanismo per dichiarare istanze di type classes
%    (meccanismo = predicato ELPI)
%      istanza (printable int) [print, lam x \ ...]
%      istanza (printable (list T)) [print, lam l \ concat (map Print_elem l) ]
%       :- istanza (printable T) [print, Print_elem].
%  - quando of trova un metodo di una type class
%    deve cercare un'istanza
%  - la funzione di ricerca di un'istanza deve generare
%    un constraint se il tipo e' una variabile
%  - cambiare di nuovo la sintassi dei tipi per permettere
%    di assumere type-class su variabili di tipo
%    es. forall T \ printable T => list T -> string
%    le => devono stare fra i forall e il tipo semplice
%  - cambiare la regola of per le definizioni di funzione
%    in modo che dopo aver tipato il corpo recuperi dall'insieme
%    dei vincoli tutte le type-class richieste e le trasformi
%    nelle premesse =>   (ELPI only)

% TODO 3: estensioni delle type classes
%  - implementare le estensioni sotto forma di regole
%    ELPI per il predicato di istanze
