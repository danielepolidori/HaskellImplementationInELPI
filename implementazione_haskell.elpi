%%% Simply typed lambda calculus

kind tipo type.
kind term type.

type app term -> term -> term.
type lam (term -> term) -> term.

type arr tipo -> tipo -> tipo.

type of term -> tipo -> prop.

mode (of i o).
of (uvar _ as X) T :- !, declare_constraint (of X T) [X].
of (app X Y) B :- of X (arr A B), of Y A.
of (lam F) (arr A B) :- pi x \ of x A => of (F x) B.


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% (31/10/2019)
% TODO 1: haskell senza type classes
%  - implementare tutti i costrutti Haskell
%    usabili per definire funzioni
%    es. pattern matching (case), e let-in
%  - definire un programma Haskell come una lista
%    di funzioni ovvero coppie nome-corpo
%  - aggiungere il forall ai tipi
%    es:  forall T \ list T -> list T -> list T
%    ovvero: un tipo e' dato da una lista di
%    forall (imbricati) terminati da un tipo
%    fatto da sole arr
%    es. forall K \ forall V \ arr (K (arr (hash K V) V))
%    controesempio:  arr T (forall K \ K)
%  - implementare il predicato of per i nuovi costrutti
%  - la regola of per le funzioni deve inserire i
%    forall per ogni meta-variabile rimasta tale nel
%    corpo (ELPI only)


%%% Forall aggiunto ai tipi

% Si possono avere due tipi (quello fatto di forall+arr e quello fatto di sole arr)
%
%   es_forall+arr:      for_all T1 \ for_all T2 \ base (arr T1 T2)
%   es_arr:             arr T1 T2

kind schema type.

type for_all (tipo -> schema) -> schema.
type base tipo -> schema.

% es.:   for_all X \ for_all Y \ base (arr X Y).


%%% Funzioni come coppie nome-corpo

% Tre casi d'uso:
%
%   - Dichiarazione      es: fun_decl print (for_all T \ base (arr T int))
%   - Implementazione    es: fun_impl print (lam x \ x)
%   - Uso                es: app (fun print) 4

kind nome_fun type.
kind declaration type.
type fun_decl nome_fun -> schema -> declaration.
%             nome funzione -> tipo funzione -> _ .
% es:   fun_decl foo (for_all T \ base (arr T T))
type assume declaration -> prop.

kind implementation type.
type fun_impl nome_fun -> term -> implementation.
%             nome funzione -> corpo funzione -> _ .
% es:   fun_impl foo1 (lam x \ lam y \ x + y)
%       fun_impl foo2 (lam x \ case_of x [branch (nat 0) (num 0), branch (succ N) (nat_to_num (succ (succ N)))])
%       fun_impl foo3 (let_in [coppia_decl id (lam A \ A)] (id 4))

type fun nome_fun -> term.

% es:   app (fun print) 4
%       =
%       print 4

of (fun N) T :- assume (fun_decl N S), instantiate S T.											% Caso 1: funzione a sé stante
of (fun N) T :- typeclass N1 T1 L, is_fun_in_decls L N S, instantiate S T, istanza N1 T1 _.		% Caso 2: funzione che è parte di una typeclass
% ~ È giusto che istanza e typeclass abbiano lo stesso tipo T1? Non dovrebbe essere che la typeclass ha un tipo generico e l'istanza un tipo concreto?

% Controlla che la funzione con quel nome e con quello schema sia presente nella lista di dichiarazioni
type is_fun_in_decls list declaration -> nome_fun -> schema -> prop.
is_fun_in_decls [fun_decl N S | TL_] N S.	% Caso base
is_fun_in_decls [fun_decl N2_ S2_ | TL] N1 S1 :- is_fun_in_decls TL N1 S1.

% Per passare da un tipo forall+arr al rispettivo tipo di sole arr
type instantiate schema -> tipo -> prop.
instantiate (base T) T.
instantiate (for_all S) O :- instantiate (S T_) O.		% '(S T_)' è una funzione con un argomento in input (es: 'F x') così da avere alla fine la base istanziata. (es: S = X \ for_all Y \ base (arr X Y))

% es.
%  Term =
%   let id = lam A \ A in     % il termine A \ A ha tipo X -> X
%                             % id viene dichiarato con schema for_all X \ X -> X
%    id 4                     % ha tipo int
%  tutto Term ha tipo int


%%% Typeclasses

kind nome_classe type.
type typeclass nome_classe -> tipo -> list declaration -> prop.
type istanza nome_classe -> tipo -> list implementation -> prop.

mode (istanza i i o).
istanza N (uvar _ as X) L :- !, declare_constraint (istanza N X L) [X].


%%% ADT (Algebraic Data Types)

% Li abbiamo introdotti perché necessari per il costrutto case

% Esempio in pseudocodice:
%
% type nat = O | S of nat
% type List A = [] | :: of A * (List A)
% type Tree K V = Leaf of K * V | Node of (Tree K V) * V * (Tree K V)
% type option A = None | Some of A

kind nome_costruttore_adt type.
type constructor nome_costruttore_adt -> list term -> term.
%                nome_adt -> argomenti_in_input_al_costruttore -> _ .
% es:   constructor zero_ []
% es:   constructor succ [N];  constructor succ [constructor succ [constructor succ [constructor zero_ []]]]
% es:   constructor lista_vuota []
% es:   constructor cons [H, TL];  constructor cons [x, (constructor cons [y, (constructor cons [z, (constructor lista_vuota [])])])]
% es:   constructor leaf [K, V];  constructor leaf [num 3, x]
% es:   constructor node [T, K, T];  constructor node [constructor leaf [num 4, x], num 9, constructor node [constructor leaf [num 11, y], num 13, constructor leaf [num 15, z]]
% es:   constructor none_ []
% es:   constructor some_ [A];  constructor some_ [x]


%%% Costrutto case

% Esempio in pseudocodice:
%
%  let f x =
%   match x of
%      O => O
%    | S y => y + 2
%
%  let sum x =
%   match x of
%      [] => O
%    | y::L => y + sum L 
%
%  let search K1 T =
%   match T with
%      Leaf(K2,V) => if K1 == K2 then Some V else None
%    | Node(T1,K2,T2) => if K1 <= K2 then search K1 T1 else search K1 T2

kind pair type.
type case_of term -> list pair -> term.
%            input -> rami -> _ .
type dato (term -> pair) -> pair.
type branch term -> term -> pair.
% es:   case_of x [branch (constructor zero_ []) (num 0), dato y \ branch (constructor succ_ [y]) (somma_int (nat_to_int y) (num 2))]
% es:   fun_impl sum (lam x \ case_of x [branch (constructor lista_vuota []) (num 0), dato y \ dato l \ branch (constructor cons [y, l]) (somma_int y (app (fun sum) l))])
% es:   fun_impl search (lam k1 \ lam t \ case_of t [dato k2 \ dato v \ branch (constructor leaf [k2, v]) (if (k1 == k2) then (constructor some_ [v]) else (constructor none_ [])), dato t1 \ dato k2 \ dato t2 \ branch (constructor node [t1, k2, t2]) (if (k1 <= k2) then (app (app (fun search) k1) t1) else (app (app (fun search) k1) t2))])

% Il case intero ha come tipo il tipo dell'output dei singoli rami
of (case_of X L) T1 :- of X T2, check_list_case L T1 T2.

% Controlla che, per ogni coppia, gli elementi di input abbiano tutti lo stesso tipo dell'input del case e gli elementi di output abbiano tutti un certo tipo (che sarà il tipo dell'intero case)
type check_list_case list pair -> tipo -> tipo -> prop.
check_list_case [] _T1 _T2.		% Caso base
check_list_case [branch A B | TL] T1 T2 :- of A T2, of B T1, check_list_case TL T1 T2.
check_list_case [dato F | TL] T1 T2 :- pi x \ of x TX_ => check_list_case [(F x) | TL] T1 T2.		% Da 'dato x \ branch [...]' passa a controllare soltanto 'branch [...]'

%% Test

type zero_ nome_costruttore_adt.
type succ_ nome_costruttore_adt.
type natural tipo.
of (constructor zero_ []) natural.
of (constructor succ_ [X]) natural :- of X natural.

type lista_vuota nome_costruttore_adt.
type cons nome_costruttore_adt.		% Prende testa e coda
type lista tipo.
of (constructor lista_vuota []) lista.
of (constructor cons [H, TL]) lista :- of H int, of TL lista.

type leaf nome_costruttore_adt.
type node nome_costruttore_adt.
type tree tipo.
of (constructor leaf [K, _V]) tree :- of K int.
of (constructor node [T1, K, T2]) tree :- of T1 tree, of K int, of T2 tree.

type none_ nome_costruttore_adt.
type some_ nome_costruttore_adt.
type option tipo.
of (constructor none_ []) option.
of (constructor some_ [_X]) option.

type somma_int nome_fun.
assume (fun_decl somma_int (base (arr int (arr int int)))).

type nat_to_int nome_fun.
assume (fun_decl nat_to_int (base (arr natural int))).

%-OK (T = int, of _X natural)
test_type 4 T :-
 of (case_of _X [branch (constructor zero_ []) (num 0), dato y \ branch (constructor succ_ [y]) (app (app (fun somma_int) (app (fun nat_to_int) y)) (num 2))]) T.

type sum nome_fun.
assume (fun_decl sum (base (arr lista int))).

%-OK (T = int, of _X lista)
test_type 5 T :-
 of (case_of _X [branch (constructor lista_vuota []) (num 0), dato y \ dato l \ branch (constructor cons [y, l]) (app (app (fun somma_int) y) (app (fun sum) l))]) T.

type search nome_fun.
assume (fun_decl search (base (arr int (arr tree option)))).

type boolean bool -> term.
type bool tipo.
of (boolean _) bool.

type if_then_else term -> term -> term -> term.
% es:   if_then_else (boolean tt) (num 5) (num 8)
of (if_then_else B X Y) T :- of B bool, of X T, of Y T.

type equal_int nome_fun.
assume (fun_decl equal_int (base (arr int (arr int bool)))).
type minor_equal_int nome_fun.
assume (fun_decl minor_equal_int (base (arr int (arr int bool)))).

%-OK ((T = option), (T = arr int (arr tree option))
test_type 6 T :-
 of (case_of _X [(dato k2 \ dato v \ branch (constructor leaf [k2, v]) (if_then_else (app (app (fun equal_int) K1) k2) (constructor some_ [v]) (constructor none_ []))), dato t1 \ dato k3 \ dato t2 \ branch (constructor node [t1, k3, t2]) (if_then_else (app (app (fun minor_equal_int) K1) k3) (app (app (fun search) K1) t1) (app (app (fun search) K1) t2))]) T.
 %of (lam k1 \ lam t \ case_of t [(dato k2 \ dato v \ branch (constructor leaf [k2, v]) (if_then_else (app (app (fun equal_int) k1) k2) (constructor some_ [v]) (constructor none_ []))), dato t1 \ dato k3 \ dato t2 \ branch (constructor node [t1, k3, t2]) (if_then_else (app (app (fun minor_equal_int) k1) k3) (app (app (fun search) k1) t1) (app (app (fun search) k1) t2))]) T.


%%% Costrutto let-in

% es:
%       let
%           id = lam A \ A
%       in
%           id 4

% es:
%       let
%           even = lam x \ match x with O => true | S n => odd n
%           odd  = lam x \ match x with O => false | S n => even n
%       in
%           even 3
%
%       Nella mia sintassi:
%        let_in [coppia_decl even (lam x \ case_of x [branch (nat 0) (boolean tt), branch (succ N) (app (decl_let odd) N)]), coppia_decl odd (lam x \ case_of x [branch (nat 0) (boolean ff), branch (succ N) (app (decl_let even) N)])] (app (decl_let even) (num 3))
%
% a) prima passata: associ a even Teven e a odd Todd (variabili fresche)
% b) chiami  of (corpo_di_even) Teven e poi of (corpo_di_odd) Todd
% c) trasformare i tipi Teven e Todd in schema tramite constraints
% d) tipi il corpo del let-in

kind decl type.
kind nome_decl type.
type let_in list decl -> term -> term.
type coppia_decl nome_decl -> term -> decl.
%				 nome -> corpo -> _ .

% es:   let_in [coppia_decl x (num 1), coppia_decl y (num 2), coppia_decl z (num 3)] (app (app (app (fun somma) (decl_let x)) (decl_let y)) (decl_let z))
%              cioè   [x = 1, y = 2, z = 3] (x + y + z)
%              cioè   lam x \ lam y \ lam z \ x + y + z

% es:   let_in [coppia_decl id (lam A \ A)] (app (decl_let id) (num 4))
%              cioè   [id = (lam A \ A)] (id 4)

%% IDEA 1	(in output associa_tipo con schema istanziato)

of (let_in L EXPR) T :- associa_list_let L L OUT, (OUT => of EXPR T).

% Prima passata per associare un tipo (come variabile) alla dichiarazione e resituisce in output una lista di and fra queste associazioni
type associa_list_let list decl -> list decl -> prop -> prop.	% Prende in input due volte la stessa lista: una da usare e una da passare oltre
associa_list_let [] L OUT :- of_list_let L L OUT.		% Caso base
associa_list_let [coppia_decl N _C | TL] L OUT :- associa_tipo N S_ => associa_list_let TL L OUT.

% Seconda passata per istanziare il tipo associato alla dichiarazione
%R Non posso fare tutto insieme. Prima associa_tipo e of (con 'base'), e poi terza passata in cui recuperi dichiarazioni, loro tipo e generalizzi il tipo (con 'for_all+base')
%R In output serie di associa_tipo 'base' (con 'and': associa_tipo N1 S1, associa_tipo N2 S2, associa_tipo N3 S3, ...) e poi nella terza passata assumo ('=>') questa serie di and e generalizzo
type of_list_let list decl -> list decl -> prop -> prop.	% Prende in input due volte la stessa lista: una da usare e una da passare oltre
of_list_let [] L OUT :- generalize_list_let L OUT.	% Caso base
of_list_let [coppia_decl N C | TL] L OUT :- associa_tipo N (base T), of C T, of_list_let TL L OUT.

% Terza passata per generalizzare il tipo associato alla dichiarazione
type generalize_list_let list decl -> prop -> prop.
generalize_list_let [] true.
generalize_list_let [coppia_decl N C | TL] (associa_tipo N S, OUT) :- associa_tipo N (base T), free_vars_let C L, vars_in_type L L', generalize L' T S, generalize_list_let TL OUT.

%% IDEA 2	(in output associa_tipo con tipo base)

of (let_in L EXPR) T :- associa_list_let L L OUT, (OUT => generalize_list_let L (of EXPR T)).

type associa_list_let list decl -> list decl -> prop -> prop.	% Prende in input due volte la stessa lista: una da usare e una da passare oltre
associa_list_let [] L OUT :- of_list_let L OUT.		% Caso base
associa_list_let [coppia_decl N _C | TL] L OUT :- associa_tipo N S_ => associa_list_let TL L OUT.

type of_list_let list decl -> prop -> prop.		% Prende in input due volte la stessa lista: una da usare e una da passare oltre
of_list_let [] true.	% Caso base
%of_list_let [coppia_decl N C | TL] (associa_tipo N (base T), OUT) :- of C T, of_list_let TL OUT.
of_list_let [coppia_decl N C | TL] (associa_tipo N (base T), OUT) :- associa_tipo N (base T), of C T, of_list_let TL OUT.

type generalize_list_let list decl -> prop -> prop.
generalize_list_let [] CMD :- CMD.
generalize_list_let [coppia_decl N C | TL] CMD :- associa_tipo N (base T), free_vars_let C L, vars_in_type L L', generalize L' T S, (associa_tipo N S => generalize_list_let TL CMD).

of (decl_let N) T :- associa_tipo N (for_all S), !, instantiate (for_all S) T.

%% IDEA 3	(in output associa_tipo con schema non istanziato)

of (let_in L EXPR) T :- associa_list_let L L OUT, (OUT => generalize_list_let L (of EXPR T)).

type associa_list_let list decl -> list decl -> prop -> prop.	% Prende in input due volte la stessa lista: una da usare e una da passare oltre
associa_list_let [] L true :- of_list_let L.		% Caso base
associa_list_let [coppia_decl N _C | TL] L (associa_tipo N S, OUT) :- associa_tipo N S => associa_list_let TL L OUT.

type of_list_let list decl -> prop.		% Prende in input due volte la stessa lista: una da usare e una da passare oltre
of_list_let [].	% Caso base
of_list_let [coppia_decl N C | TL] :- associa_tipo N (base T), of C T, of_list_let TL.

type generalize_list_let list decl -> prop -> prop.
generalize_list_let [] CMD :- CMD.
generalize_list_let [coppia_decl N C | TL] CMD :- associa_tipo N S, of C T, free_vars_let C L, vars_in_type L L', generalize L' T S, generalize_list_let TL CMD.

%%

% Restituisce le variabili di tipo contenute nei tipi delle variabili di termini in input
type vars_in_type list term -> list tipo -> prop.
%                 variabili di termini -> variabili di tipo -> _ .
vars_in_type [] [].		% Caso base
vars_in_type [H|TL] L :- of H T, free_vars T [] L1, vars_in_type TL L2, union_list_tipo L1 L2 L.

type associa_tipo nome_decl -> schema -> prop.

type decl_let nome_decl -> term.
of (decl_let N) T :- associa_tipo N S, instantiate S T.

% Trova tutte le variabili libere (= non legate da lambda o let-in) presenti nel termine in input
type free_vars_let term -> list term -> prop.
%                  corpo let-in -> variabili libere -> _ .
mode (free_vars_let i o).
%free_vars_let (lam F) L :- pi x \ free_vars_let x [] => free_vars_let (F x) L.		% 'pi x' restituisce una costante
%Rfree_vars_let (lam F) L :- pi x \ (free_vars_let x [] :- !) => free_vars_let (F x) L.		% 'pi x' restituisce una costante
%R free_vars_let x [] :- !.		% ~ Non capisco dove e come dovrei utilizzarla
free_vars_let (lam F) L :- pi x \ (free_vars_let x [] :- !) => free_vars_let (F x) L.		% 'pi x' restituisce una costante
free_vars_let (app F T) L :- free_vars_let F L1, free_vars_let T L2, union_list_term_univ L1 L2 L.
free_vars_let (fun _) [].
free_vars_let (constructor _ LI) L :- free_vars_let_aux_adt LI L.
free_vars_let (case_of X LC) L :- free_vars_let X L1, free_vars_let_aux_case LC L2, union_list_term_univ L1 L2 L.
free_vars_let (boolean _) [].
free_vars_let (if_then_else B X Y) L1plusL2plusL3 :- free_vars_let B L1, free_vars_let X L2, free_vars_let Y L3, union_list_term_univ L1 L2 L1plusL2, union_list_term_univ L1plusL2 L3 L1plusL2plusL3.
free_vars_let (let_in LC T) L :- free_vars_let_aux_let LC L1, free_vars_let T L2, union_list_term_univ L1 L2 L.
free_vars_let (decl_let _) [].
free_vars_let (num _) [].
free_vars_let T [T].

% Trova tutte le variabili libere (= non legate da lambda o let-in) negli argomenti in input ad un costruttore di adt
type free_vars_let_aux_adt list term -> list term -> prop.
free_vars_let_aux_adt [] [].
free_vars_let_aux_adt [H|TL] L :- free_vars_let H L1, free_vars_let_aux_adt TL L2, union_list_term_univ L1 L2 L.

% Trova tutte le variabili libere (= non legate da lambda o let-in) nei rami del case
type free_vars_let_aux_case list pair -> list term -> prop.
%                           rami del case -> variabili libere -> _ .
free_vars_let_aux_case [] [].		% Caso base
free_vars_let_aux_case [branch _ T | TL] L :- free_vars_let T L1, free_vars_let_aux_case TL L2, union_list_term_univ L1 L2 L.
free_vars_let_aux_case [dato F | TL] L :- pi x \ (free_vars_let_aux_case [(F x) | TL] L1, union_list_term_univ [x] L1 L).		% Da 'dato x \ branch [...]' passa a controllare soltanto 'branch [...]'

% Trova tutte le variabili libere (= non legate da lambda o let-in) nelle dichiarazioni del let-in
type free_vars_let_aux_let list decl -> list term -> prop.
%                          dichiarazioni del let-in -> variabili libere -> _ .
free_vars_let_aux_let [] [].		% Caso base
free_vars_let_aux_let [coppia_decl _ T | TL] L :- free_vars_let T L1, free_vars_let_aux_let TL L2, union_list_term_univ L1 L2 L.

% Fa l'unione senza duplicati di due liste di termini
type union_list_term_univ list term -> list term -> list term -> prop.
union_list_term_univ [] L2 L2.		% Caso base
union_list_term_univ [U|L1] L2 L :-
 union_list_term_univ L1 L2 L1plusL2,
 ((memp_term U L1plusL2, !, L = L1plusL2)		% Se l'elemento U è contenuto nella lista L1+L2, ritorna la lista L1+L2
 ; L = [U|L1plusL2]).							% Altrimenti se l'elemento U non è contenuto nella lista L1+L2, ritorna la lista U+L1+L2

% Cerca un termine in una lista di termini, fallisce se non lo trova
type memp_term term -> list term -> prop.
memp_term X [X'|_] :- test_eqp_term X X'.		% Caso base
memp_term X [_|L] :- memp_term X L.

% Testa se due metavariabili sono uguali senza unificarle
type test_eqp_term term -> term -> prop.
test_eqp_term X X' :- declare_constraint (eqp_term X X') [].
% es:   test_eqp_term X Y  -->  non vale
% es:   test_eqp_term X X  -->  vale

% Osservi senza istanziare, dal metalivello.
% Non fa backtracking: se scarta la prima (true) non va alla seconda (false).
type eqp_term term -> term -> prop.
constraint eqp_term {
 rule \ (eqp_term A A) <=> true.	% Tolgo quel vincolo e aggiungo 'true' (viene messo al posto del vincolo)
 rule \ (eqp_term A B) <=> false.	% Tolgo quel vincolo e aggiungo 'false' (viene messo al posto del vincolo)
}

% Fa l'unione di due liste di termini, eventualmente con duplicati (necessario perché ad esempio in 'lam x \ lam x \ [...]' le due 'x' sono due termini diversi anche se hanno lo stesso nome)
type union_list_term list term -> list term -> list term -> prop.
union_list_term [] L2 L2.		% Caso base
union_list_term [U|L1] L2 [U|L1plusL2] :- union_list_term L1 L2 L1plusL2.

% Per passare da un tipo di sole arr al rispettivo tipo forall+arr (escludendo alcune variabili di tipo dalla lista di quelle da generalizzare)
type generalize list tipo -> tipo -> schema -> prop.
%               variabili da escludere -> tipo -> schema -> _ .
% es:   generalize [] (arr (arr X Y) (arr X Z)) S.
%        --> S diventa for_all c0 \ for_all c1 \ for_all c2 \ base (arr (arr c1 c0) (arr c1 c2))
generalize Lnot T S :-
 free_vars T Lnot L1,
 generalize_forall L1 L1 T S.

% Colleziona la lista (es: [X,Y,Z]) priva di duplicati delle variabili nel tipo in input (escludendo quelle presenti nella lista in input)
type free_vars tipo -> list tipo -> list tipo -> prop.
%              tipo -> variabili da escludere -> variabili libere -> _ .
mode (free_vars i i o).
free_vars (uvar _ as X) Lnot [] :- memp_tipo X Lnot, !.		% Caso base 2: Se la X (un tipo non istanziato: una variabile) è presente in L restituisce una lista vuota
free_vars (uvar _ as X) _ [X].								% Altrimenti restituisce una lista contenente la X
free_vars (arr T1 T2) Lnot L :-
 free_vars T1 Lnot L1,
 free_vars T2 Lnot L2,
 union_list_tipo L1 L2 L.
free_vars _T _ [].											% Caso base 1: Se trova un tipo istanziato (es: int, bool, ...) lo ignora e restituisce una lista vuota

% Fa l'unione (senza duplicati) di due liste di tipi
type union_list_tipo list tipo -> list tipo -> list tipo -> prop.
union_list_tipo [] L2 L2.		% Caso base
union_list_tipo [U|L1] L2 L :-
 union_list_tipo L1 L2 L1plusL2,
 ((memp_tipo U L1plusL2, !, L = L1plusL2)		% Se l'elemento U è contenuto nella lista L1+L2, ritorna la lista L1+L2
 ; L = [U|L1plusL2]).							% Altrimenti se l'elemento U non è contenuto nella lista L1+L2, ritorna la lista U+L1+L2

% Cerca un tipo in una lista di tipi, fallisce se non lo trova
type memp_tipo tipo -> list tipo -> prop.
memp_tipo X [X'|_] :- test_eqp_tipo X X'.		% Caso base
memp_tipo X [_|L] :- memp_tipo X L.

% Testa se due metavariabili sono uguali senza unificarle
type test_eqp_tipo tipo -> tipo -> prop.
test_eqp_tipo X X' :- declare_constraint (eqp_tipo X X') [].
% es:   test_eqp_tipo X Y  -->  non vale
% es:   test_eqp_tipo X X  -->  vale

% Osservi senza istanziare, dal metalivello.
% Non fa backtracking: se scarta la prima (true) non va alla seconda (false).
type eqp_tipo tipo -> tipo -> prop.
constraint eqp_tipo {
 rule \ (eqp_tipo A A) <=> true.	% Tolgo quel vincolo e aggiungo 'true' (viene messo al posto del vincolo)
 rule \ (eqp_tipo A B) <=> false.	% Tolgo quel vincolo e aggiungo 'false' (viene messo al posto del vincolo)
}

% Mette al posto delle variabili (es: [X,Y,Z]) delle costanti quantificate con un forall
type generalize_forall list tipo -> list tipo -> tipo -> schema -> prop.	% Prende in input due volte la stessa lista: una da usare e una da passare oltre
%                      variabili -> variabili -> tipo -> schema -> _ .
generalize_forall [] L T S :- generalize_instance [] _ L T S.		% Caso base
generalize_forall [X|TL] L T (for_all S) :- pi x \ assoc X x => generalize_forall TL L T (S x).

% Recupera anche l'eventuale vincolo della typeclass, dopodiché trasforma quei vincoli in uno schema tramite "implies"
type generalize_instance list prop -> tipo -> list tipo -> tipo -> schema -> prop.
%                        istanze su tipoX -> tipoX -> variabili -> tipo -> schema -> _ .
generalize_instance [] _ [] T S :- copy T S.	% Caso base
generalize_instance [] _ [X|TL] T S :- retrieve_constraints X LI, generalize_instance LI X TL T S.
generalize_instance [istanza N _ _ | LI] X TL T (implies (is_instance N X') S) :- assoc X X', generalize_instance LI X TL T S.

% L'ipotesi (assoc X x) ricorda che la X deve essere sostituita con la x durante la copy
type assoc tipo -> tipo -> prop.
mode (assoc i o).

% Fa la copia ricorsiva
type copy tipo -> schema -> prop.	% ~ A questo punto (avendo messo ovunque 'base') non si potrebbe fare che come secondo argomento prende un 'tipo' anziché uno 'schema'?
mode (copy i o).
copy (uvar _ as X) (base Y) :- assoc X' Y, test_eqp_tipo X X'.		% Caso base 2: Se trova un tipo non istanziato (una variabile)
copy (arr T1 T2) (base (arr T1' T2')) :-
 copy T1 (base T1'),
 copy T2 (base T2').
copy T (base T).													% Caso base 1: Se trova un tipo istanziato (es: int, bool, ...)

% ~ È giusto che i vincoli 'istanza _ X _' vengano rimossi?
%R   --> SI
% Il predicato (retrieve_constraints X L) prende X in input e mette in L la lista di tutti i vincoli su X, rimuovendoli dalla lista dei predicati.
type retrieve_constraints tipo -> list prop -> prop.
retrieve_constraints X [Y|L] :-
 declare_constraint (retrieve X Y) [X], !,
 retrieve_constraints X L.
retrieve_constraints _ [].	% Caso base

type retrieve tipo -> prop -> prop.
constraint istanza retrieve {
 rule \ (retrieve X Y) (istanza N X L) <=> (Y = istanza N X L).		% Tolgo quei due vincoli a sx e aggiungo quello a dx (viene messo al posto del vincolo)		% 'istanza N X L' chiede che su X sia dichiarata un'istanza della type-class N
 rule \ (retrieve X Y) <=> false.									% Tolgo quel vincolo e aggiungo 'false' (viene messo al posto del vincolo)
}


%% Test

type x nome_decl.
type y nome_decl.
type z nome_decl.

%-OK (T = int)
test_type 7 T :-
 of (let_in [coppia_decl x (num 1), coppia_decl y (num 2), coppia_decl z (num 3)] (app (app (fun somma_int) (app (app (fun somma_int) (decl_let x)) (decl_let y))) (decl_let z))) T.

type even nome_decl.
type odd nome_decl.

%-OK (T = bool)
test_type 8 T :-
 of (let_in [coppia_decl even (lam x \ case_of x [branch (constructor zero_ []) (boolean tt), dato n \ branch (constructor succ_ [n]) (app (decl_let odd) n)]), coppia_decl odd (lam x \ case_of x [branch (constructor zero_ []) (boolean ff), dato n \ branch (constructor succ_ [n]) (app (decl_let even) n)])] (app (decl_let even) (constructor succ_ [constructor succ_ [constructor succ_ [constructor zero_ []]]]))) T.

type test_schema int -> schema -> prop.

%-OK (S = for_all c0 \ for_all c1 \ for_all c2 \ base (arr (arr c1 c0) (arr c1 c2)))
test_schema 1 S :-
 generalize [] (arr (arr X Y_) (arr X Z_)) S.

type f nome_decl.

%-OK (T = arr X0 (arr (arr X0 X1) X1))  con  associa_tipo f (for_all c1 \ base (arr (arr X0 c1) c1))
test_type 11 T :-
 of (lam x \ let_in [coppia_decl f (lam g \ app g x)] (decl_let f)) T.

type id nome_decl.

%-OK (T = int)  con  associa_tipo id (for_all c0 \ base (arr c0 c0))
test_type 12 T :-
 of (let_in [coppia_decl id (lam A \ A)] (app (decl_let id) (num 4))) T.

%-OK (T = bool)  con  associa_tipo id (for_all c0 \ base (arr c0 c0))
test_type 13 T :-
 of (let_in [coppia_decl id (lam A \ A)] (app (decl_let id) (boolean tt))) T.

% ((id id) 4)		id1:(int->int)->(int->int)		id2:int->int
%-OK?	(T = int)  con  associa_tipo id (for_all c0 \ base (arr c0 c0))
test_type 17 T :-
 of (let_in [coppia_decl id (lam A \ A)] (app (app (decl_let id) (decl_let id)) (num 4))) T.

%-OK 	(T = arr X0 (arr X0 (arr (arr X0 X1) X1))  con  associa_tipo f (for_all c2 \ base (arr (arr X0 c2) c2)))
test_type 14 T :-
 of (lam x \ lam y \ let_in [coppia_decl f (lam g \ if_then_else (boolean ff) (app g x) (app g y))] (decl_let f)) T.

%-OK 	(T = arr X0 (arr X1 (arr (arr X0 X2) (arr (arr X1 X2) X2)))  con  associa_tipo f (for_all c2 \ base (arr (arr X0 c2) (arr (arr X1 c2) c2))))
test_type 15 T :-
 of (lam x \ lam y \ let_in [coppia_decl f (lam g \ lam h \ if_then_else (boolean ff) (app g x) (app h y))] (decl_let f)) T.

% La 'f' deve avere il tipo:  (A -> (B -> C)) -> (B -> C)  con  of x A
%-OK	(T = arr X0 (arr (arr X0 (arr X1 X2)) (arr X1 X2))  con  associa_tipo f (for_all c1 \ for_all c2 \ base (arr (arr X0 (arr c1 c2)) (arr c1 c2))))
test_type 16 T :-
 of (lam x \ let_in [coppia_decl f (lam g \ lam y \ app (app g x) y)] (decl_let f)) T.

type g nome_decl.

type int_to_forall nome_fun.
assume (fun_decl int_to_forall (for_all t \ base (arr int t))).

%R Funzioni mutue:  f chiama g  e  g chiama f
% f chiama g  e  g chiama 2: scopri che la f è monomorfa sugli interi solo dalla g (se guardi soltanto la f pensi che sia polimorfa)
%-?
test_type 18 T :-
 of (let_in [coppia_decl f (lam x \ app (decl_let g) x), coppia_decl g (lam y \ app (decl_let f) (num 2))] (decl_let f)) T.
%-OK?	(T = arr int X0)  con  associa_tipo f (for_all c0 \ base (arr int c0)) , associa_tipo g (for_all c0 \ base (arr int c0))
test_type 25 T :-
 of (let_in [coppia_decl f (lam x \ app (decl_let g) x), coppia_decl g (lam y \ app (fun int_to_forall) y)] (decl_let f)) T.

type test_list_prop int -> list prop -> prop.

type a nome_classe.
type b nome_classe.
type c nome_classe.

% Il test dichiara tre vincoli istanza, due su X (con a e c) e uno su Y (con b).
%-OK (L = [istanza c X0 X1, istanza a X0 X2])  con il vincolo  istanza b X3 _
test_list_prop 1 L :-
 declare_constraint (istanza a X _) [X],
 declare_constraint (istanza b Y _) [Y],
 declare_constraint (istanza c X _) [X],
 retrieve_constraints X L.

%-OK (L = [istanza b X0 X1])
test_list_prop 2 L :-
 declare_constraint (istanza a X _) [X],
 declare_constraint (istanza b Y _) [Y],
 declare_constraint (istanza c X _) [X],
 retrieve_constraints Y L.
 
%-OK (L = [])
test_list_prop 3 L :-
 declare_constraint (istanza a X _) [X],
 declare_constraint (istanza b Y _) [Y],
 declare_constraint (istanza c X _) [X],
 retrieve_constraints Z_ L.

%typeclass printable T [fun_decl print_ (base (arr T string))].		% È commentata perché viene assunta in un altro punto del codice

% Da confrontare con il test 20
%-OK (T = arr X0 X0)  con  associa_tipo f (for_all c0 \ base (arr c0 c0))
test_type 19 T :-
 of (let_in [coppia_decl f (lam x \ x)] (decl_let f)) T.

%-OK (T = arr X0 string)  con  istanza printable X0 X1 , associa_tipo f (for_all c0 \ implies (is_instance printable c0) (base (arr c0 string)))
test_type 20 T :-
 of (let_in [coppia_decl f (lam x \ app (fun print_) x)] (decl_let f)) T.

type comparable nome_classe.
type eq_ nome_fun.
typeclass comparable V [fun_decl eq_ (base (arr V (arr V bool)))].

%-OK (...  con  associa_tipo f (for_all c0 \ implies (is_instance printable c0) (base (arr c0 string))) , associa_tipo g (for_all c0 \ implies (is_instance comparable c0) (base (arr c0 (arr c0 bool)))))
test_type 21 T :-
 of (let_in [coppia_decl f (lam x \ app (fun print_) x), coppia_decl g (lam y1 \ lam y2 \ app (app (fun eq_) y1) y2)] (decl_let g)) T.

type hashable nome_classe.
type hash nome_fun.
typeclass hashable T [fun_decl hash (base (arr T int))].

type associa_nome_hash nome_fun.
assume (fun_decl associa_nome_hash (base (arr string (arr int bool)))).		% es: Li associa e ritorna true se il tutto è andato a buon fine

% La x è sia printable che hashable
%-OK (...  con  associa_tipo f (for_all c0 \ implies (is_instance hashable c0) (implies (is_instance printable c0) (base (arr c0 bool)))))
test_type 22 T :-
 of (let_in [coppia_decl f (lam x \ app (app (fun associa_nome_hash) (app (fun print_) x)) (app (fun hash) x))] (decl_let f)) T.

% La x è printable, la y è hashable (la x e la y potrebbero avere lo stesso tipo, il quale sarebbe sia printable che hashable, dal momento che si tratta di tipi generici per entrambe le typeclass)
%-NO (...  con  associa_tipo f (for_all c0 \ for_all c1 \ implies (is_instance printable c1) (implies (is_instance hashable c1) (base (arr c1 (arr c1 bool)))))
%          oppure  associa_tipo f (for_all c0 \ for_all c1 \ implies (is_instance printable c1) (implies (is_instance hashable c0) (base (arr c1 (arr c0 bool))))))
test_type 23 T :-
 of (let_in [coppia_decl f (lam x \ lam y \ app (app (fun associa_nome_hash) (app (fun print_) x)) (app (fun hash) y))] (decl_let f)) T.

% ~ È giusto che fallisca?
%-NO (Failure)
test_type 24 T :-
 of (let_in [coppia_decl f (lam x \ lam y \ app (app (fun eq_) x) (app (fun print_) y))] (decl_let f)) T.
 %pi x \ of x string => of (let_in [coppia_decl f (lam y \ app (app (fun eq_) x) (app (fun print_) y))] (decl_let f)) T.


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% primo esempio senza polimorfismo: riuscire a tipare
% of 1 int.
% of 2 int.
% typeclass printable T [print, arr T int].
% istanza printable int [print, lam x \ x].
% istanza printable (list T) [print, lam l \ concat (map Print_elem l) ]
%  :- istanza printable T [print, Print_elem].
% of (app Fun Arg) Ty :-			% Ty = "tipo"
%   istanza N L,					% N = "nome", L = "lista"
%   cerca_in_L L Fun Te T,			% Te = "termine"
%   typeclass N TY Defs,
%   cerca_Fun_in_LTY Fun Defs Ty.
%% esempio:  of (app print 3) Z
%% deve istanziare Z con int.
% check_istanze :-		% Controlla che per ogni istanza del programma ci sia la corrispondente typeclass
%   istanza N ARG DEF,											% N = "nome", ARG = "argomento", DEF = lista di definizioni
%   (typeclass N ARG DECL, simil_of_list DEF DECL ; exit 0)		% DECL = lista di dichiarazioni
%   fail.
% check_istanze.	% Caso base
% test Prog L :-
%   simil_of_list per fare of su tutte le funzioni di L
% test [f, lam x \ print (app (app plus 1) 2)].
% test [f, lam x \ print [1,2,3]].


% Usando la mia sintassi:

type string tipo.
type int tipo.
type list tipo -> tipo.

type num int -> term.

of (num _N) int.

type print_int nome_fun.
type map nome_fun.
type concat nome_fun.

assume (fun_decl print_int (base (arr int string))).
assume (fun_decl map (for_all s \ for_all t \ base (arr (arr s t) (arr (list s) (list t))))).
assume (fun_decl concat (base (arr (list string) string))).

%% Test sui for_all
%-OK (OUT = arr (list int) string)
type test_type int -> tipo -> prop.
test_type 1 OUT :-
 of (lam l \ app (fun concat) (app (app (fun map) (fun print_int)) l)) OUT.

type printable nome_classe.
type print_ nome_fun.

typeclass printable T [fun_decl print_ (base (arr T string))].

istanza printable int [fun_impl print_ (fun print_int)].
istanza printable (list T) [fun_impl print_ (lam l \ app (fun concat) (app (app (fun map) Print_elem) l))]
 :- istanza printable T [fun_impl print_ Print_elem].

%test [f, lam x \ app (fun print_) (app (app plus 1) 2)].
%test [f, lam x \ app (fun print_) [1,2,3]].


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% (22/11/2019)
%%%% TODO NEXT A
%
% implementare il caso of (fun F) che cerchi un'istanza di F in una type-class
%    1) cerchi la type-class che dichiara la funzione F
%    2) cerchi l'istanza che ti serve creando un constraint se il tipo
%       è una variabile
%% esempio1:  of (app (fun print_) (num 3))) Z
%%            output: Z = string
%% esempio2:  of (lam x \ app (fun print_) x)) Z
%%            output: Z = X -> string
%%            con un constraint  (istanza printable X L)


%%% Test
%-OK (Z = string)
test_type 2 Z :- of (app (fun print_) (num 3)) Z.
%-OK (Z = arr X0 string, istanza printable X0 _)
test_type 3 Z :- of (lam x \ app (fun print_) x) Z.


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% (22/11/2019)
%%%% TODO ORTHOGONAL (= ortgonale a TODO NEXT A)
%%  data una istanza, verificare se è ben definita rispetto alla sua typeclass
%%  esempio:  check (istanza printable int [fun_impl print_ (fun print_int)])
%%  esempio hard (ne riparliamo): come controllare una istanza condizionale come questa
%%    istanza printable (list T) [fun_impl print_ (lam l \ app (fun concat) (app (app (fun map) Print_elem) l))]
%%    :- istanza printable T [fun_impl print_ Print_elem].


type check_istanza prop -> prop.
check_istanza (istanza N TA_ LA) :- typeclass N TB_ LB, match_lista_fun LA LB.

% Controlla che ci siano funzioni con lo stesso nome e che abbiano lo stesso tipo
type match_lista_fun list implementation -> list declaration -> prop.
match_lista_fun [] _L.	% Caso base
match_lista_fun [H|T] L :-
 search_fun H L LminusH,
 match_lista_fun T LminusH.

% ~ Quando la funzione viene trovata, in 'LminusH' si restituisce solo la parte restante della lista e non tutta la lista meno la funzione trovata (o sbaglio?)
type search_fun implementation -> list declaration -> list declaration -> prop.
search_fun (fun_impl N C) [fun_decl N S | TL] TL :- of C T, instantiate S T.		% Caso base
search_fun (fun_impl N1 C) [fun_decl N2 S | TL] [fun_decl N2 S | OUT] :- search_fun (fun_impl N1 C) TL OUT.		% ~ In questo modo la lista di output LminusH viene man mano riempita funzione dopo funzione?


%% Test

type test_ int -> prop.

%typeclass printable T [fun_decl print_ (base (arr T string))].		% È commentata perché viene assunta in un altro punto del codice

%-OK
test_ 1 :-
 check_istanza (istanza printable int [fun_impl print_ (fun print_int)]).


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% (22/11/2019)
%%%% TODO NEXT B
%% estendere la sintassi degli schemi con le istanze di type class
%%    ora:   for_all t \ base (t -> string)
%%    dopo:   for_all t \ implies (is_instance printable t) (base (t -> string))
%%
%% estendere il predicato instantiate in modo che cerchi le istanze


kind holds type.
type is_instance nome_classe -> tipo -> holds.

type implies holds -> schema -> schema.

% es:   for_all t \ implies (is_instance printable t) (base (arr t string))
% es:   for_all t1 \ implies (is_instance printable t1) (for_all t2 \ implies (is_instance printable t2) (for_all t3 \ (base (arr t1 (arr t2 t3)))))
% es:   for_all t \ implies (is_instance printable t) (implies (is_instance comparable t) (implies (is_instance sortable t) (base (arr t t))))
% es:   for_all t1 \ for_all t2 \ implies (is_instance printable t1) (implies (is_instance comparable t1) (implies (is_instance sortable t2) (base (arr t1 t2))))


instantiate (implies (is_instance N T) S) O :- istanza N T _L, instantiate S O.	% ~ È sbagliato: deve cercare il vincolo 'istanza', non crearne uno nuovo

% Cerca il vincolo 'istanza', se non lo trova ne crea uno nuovo
%Rinstantiate (implies (is_instance N _) S) O :- declare_constraint (cerca_istanza N) [], !, instantiate S O.
%instantiate (implies (is_instance N T) S) O :- istanza N T _, instantiate S O.

/*
type cerca_istanza nome_classe -> prop.
constraint cerca_istanza {
 rule (istanza N _ _) \ (cerca_istanza N) <=> true.			% 'istanza N _ _' chiede che sia dichiarata un'istanza della type-class N
 rule \ (cerca_istanza N) <=> false.						% Tolgo quel vincolo e aggiungo 'false' (viene messo al posto del vincolo)
}
*/


%% Test

% ~ È giusto che impone un vincolo per una istanza generica piuttosto che notare che una istanza specifica già esiste e che quindi può supporre i vari tipi plausibili dell'istanza?
%   (es: capisce che deve esistere una generica 'istanza comparable X1 _' ma non riesce a dire che funziona con 'X1 = int')
%   Non trova l'istanza esistente ma impone un vincolo per una nuova istanza.
%R   --> È GIUSTO COSÌ

%-OK (T = arr X0 string)  con  istanza printable X0 X1
test_type 9 T :-
 instantiate (for_all t \ implies (is_instance printable t) (base (arr t string))) T.

type comparable nome_classe.
type compare nome_fun.
type compare_int nome_fun.
istanza comparable int [fun_impl compare (fun compare_int)].

%-OK (T = arr X0 (arr X1 X2))  con  istanza comparable X1 X3 , istanza printable X0 X4
test_type 10 T :-
 instantiate (for_all t1 \ implies (is_instance printable t1) (for_all t2 \ implies (is_instance comparable t2) (for_all t3 \ (base (arr t1 (arr t2 t3)))))) T.


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% (22/11/2019)
%%%% TODO NEXT 3
%% implementare il let-in / implementare controllo di corrispondeza
%% fra fun_decl e fun_impl
%% recuperando i vincoli



% (31/10/2019)
% TODO 2: aggiunta delle type classes
%  - meccanismo per dichiarare le type classes
%    (meccanismo = predicato ELPI)
%    typeclass (printable T) [print, arr T string]
%  - meccanismo per dichiarare istanze di type classes
%    (meccanismo = predicato ELPI)
%      istanza (printable int) [print, lam x \ ...]
%      istanza (printable (list T)) [print, lam l \ concat (map Print_elem l) ]
%       :- istanza (printable T) [print, Print_elem].
%  - quando of trova un metodo di una type class
%    deve cercare un'istanza
%  - la funzione di ricerca di un'istanza deve generare
%    un constraint se il tipo e' una variabile
%  - cambiare di nuovo la sintassi dei tipi per permettere
%    di assumere type-class su variabili di tipo
%    es. forall T \ printable T => list T -> string
%    le => devono stare fra i forall e il tipo semplice
%  - cambiare la regola of per le definizioni di funzione
%    in modo che dopo aver tipato il corpo recuperi dall'insieme
%    dei vincoli tutte le type-class richieste e le trasformi
%    nelle premesse =>   (ELPI only)

% (31/10/2019)
% TODO 3: estensioni delle type classes
%  - implementare le estensioni sotto forma di regole
%    ELPI per il predicato di istanze
